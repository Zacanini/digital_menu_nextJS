/**
 * Exemplo de Uso das Camadas de L√≥gica
 * 
 * Este arquivo demonstra como as camadas interagem seguindo
 * os princ√≠pios da Clean Architecture com inje√ß√£o de depend√™ncia.
 */

import { menuAPIService } from '../infrastructure/services/menu-api-service';
import { getMenuItemsUseCase, getPizzasByCategoryUseCase } from '../application/use-cases/get-menu-items';

/**
 * Exemplo de como usar o caso de uso em um Server Component do Next.js
 */
export async function exemploUsoServerComponent() {
  try {
    // A camada de apresenta√ß√£o chama o caso de uso da aplica√ß√£o
    // passando o servi√ßo de infraestrutura como depend√™ncia
    const menuData = await getMenuItemsUseCase(menuAPIService);
    
    console.log('üìä Dados do menu carregados:');
    console.log(`- ${menuData.metadata.totalPizzas} pizzas dispon√≠veis`);
    console.log(`- ${menuData.metadata.totalCategories} categorias ativas`);
    console.log(`- ${menuData.featuredPizzas.length} pizzas em destaque`);
    
    return menuData;
  } catch (error) {
    console.error('‚ùå Erro ao carregar menu:', error);
    throw error;
  }
}

/**
 * Exemplo de como buscar pizzas de uma categoria espec√≠fica
 */
export async function exemploUsoPorCategoria(categoryId: string) {
  try {
    const pizzas = await getPizzasByCategoryUseCase(menuAPIService, categoryId);
    
    console.log(`üçï ${pizzas.length} pizzas encontradas na categoria ${categoryId}`);
    
    return pizzas;
  } catch (error) {
    console.error('‚ùå Erro ao carregar pizzas da categoria:', error);
    throw error;
  }
}

/**
 * Demonstra√ß√£o dos benef√≠cios da arquitetura implementada:
 * 
 * 1. ‚úÖ Inje√ß√£o de Depend√™ncia: 
 *    - O caso de uso recebe o servi√ßo como par√¢metro
 *    - Facilita testes e permite trocar implementa√ß√µes
 * 
 * 2. ‚úÖ Separa√ß√£o de Responsabilidades:
 *    - Domain: Entidades e tipos (Pizza, Category)
 *    - Application: L√≥gica de neg√≥cio (casos de uso)
 *    - Infrastructure: Acesso a dados (MenuAPIService)
 *    - Presentation: UI (ser√° implementada na pr√≥xima fase)
 * 
 * 3. ‚úÖ Testabilidade:
 *    - Cada camada pode ser testada independentemente
 *    - Mock do servi√ßo facilita testes dos casos de uso
 * 
 * 4. ‚úÖ Escalabilidade:
 *    - F√°cil adicionar novos casos de uso
 *    - Trocar fonte de dados sem afetar UI
 *    - Adicionar cache, valida√ß√µes, etc.
 */